
cronometro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000506  0000059a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000506  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010c  0080010c  000005a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007cf  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ac  00000000  00000000  00000e17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004dd  00000000  00000000  000014c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  000019a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000070c3  00000000  00000000  00001a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000118  00000000  00000000  00008af7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00008c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002911  00000000  00000000  00008c2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 28 01 	jmp	0x250	; 0x250 <__vector_1>
   8:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e0       	ldi	r30, 0x06	; 6
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 81 02 	jmp	0x502	; 0x502 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
// -- Função de vetores de interrupção externa
ISR(INT0_vect); //  INT EXT 0
ISR(INT1_vect);	// INT EXT 1

int main(void)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	2e 97       	sbiw	r28, 0x0e	; 14
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
	
	
	DDRD = 0x00;	// configura os pinos d como entrada
  ba:	8a e2       	ldi	r24, 0x2A	; 42
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	fc 01       	movw	r30, r24
  c0:	10 82       	st	Z, r1
	PORTD = 0xFF;	// pull-up
  c2:	8b e2       	ldi	r24, 0x2B	; 43
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	2f ef       	ldi	r18, 0xFF	; 255
  c8:	fc 01       	movw	r30, r24
  ca:	20 83       	st	Z, r18
	DDRC = 0xFF;	// configira para saida o PORTD (1 saida 0  entrada)
  cc:	87 e2       	ldi	r24, 0x27	; 39
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	fc 01       	movw	r30, r24
  d4:	20 83       	st	Z, r18
	DDRB = 0xFF;	// configira para saida o PORTD (1 saida 0  entrada)
  d6:	84 e2       	ldi	r24, 0x24	; 36
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
	
	//configuração das interrupções
	EICRA = 0b00001010;	// configurando como borda de descida
  e0:	89 e6       	ldi	r24, 0x69	; 105
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	2a e0       	ldi	r18, 0x0A	; 10
  e6:	fc 01       	movw	r30, r24
  e8:	20 83       	st	Z, r18
	EIMSK = 0b00000011; //habilita a interrupção extrena INT0 e INT1
  ea:	8d e3       	ldi	r24, 0x3D	; 61
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	23 e0       	ldi	r18, 0x03	; 3
  f0:	fc 01       	movw	r30, r24
  f2:	20 83       	st	Z, r18
	sei(); // habilita todas as interrupções
  f4:	78 94       	sei

	

	PORTC = seg[0]; // inicializa oem 0 o display esquerdo
  f6:	88 e2       	ldi	r24, 0x28	; 40
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fe:	fc 01       	movw	r30, r24
 100:	20 83       	st	Z, r18
	
	while (1)
	{
		
		
		if(aux)
 102:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <aux>
 106:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <aux+0x1>
 10a:	89 2b       	or	r24, r25
 10c:	d1 f3       	breq	.-12     	; 0x102 <main+0x5c>
		{
			
			PORTB = seg[cont];
 10e:	85 e2       	ldi	r24, 0x25	; 37
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__data_end>
 116:	22 2f       	mov	r18, r18
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	20 50       	subi	r18, 0x00	; 0
 11c:	3f 4f       	sbci	r19, 0xFF	; 255
 11e:	f9 01       	movw	r30, r18
 120:	20 81       	ld	r18, Z
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
			cont++;
 126:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 12a:	8f 5f       	subi	r24, 0xFF	; 255
 12c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	aa e7       	ldi	r26, 0x7A	; 122
 136:	b4 e4       	ldi	r27, 0x44	; 68
 138:	89 83       	std	Y+1, r24	; 0x01
 13a:	9a 83       	std	Y+2, r25	; 0x02
 13c:	ab 83       	std	Y+3, r26	; 0x03
 13e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 140:	20 e0       	ldi	r18, 0x00	; 0
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	4a e7       	ldi	r20, 0x7A	; 122
 146:	55 e4       	ldi	r21, 0x45	; 69
 148:	69 81       	ldd	r22, Y+1	; 0x01
 14a:	7a 81       	ldd	r23, Y+2	; 0x02
 14c:	8b 81       	ldd	r24, Y+3	; 0x03
 14e:	9c 81       	ldd	r25, Y+4	; 0x04
 150:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__mulsf3>
 154:	dc 01       	movw	r26, r24
 156:	cb 01       	movw	r24, r22
 158:	8d 83       	std	Y+5, r24	; 0x05
 15a:	9e 83       	std	Y+6, r25	; 0x06
 15c:	af 83       	std	Y+7, r26	; 0x07
 15e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 160:	20 e0       	ldi	r18, 0x00	; 0
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	40 e8       	ldi	r20, 0x80	; 128
 166:	5f e3       	ldi	r21, 0x3F	; 63
 168:	6d 81       	ldd	r22, Y+5	; 0x05
 16a:	7e 81       	ldd	r23, Y+6	; 0x06
 16c:	8f 81       	ldd	r24, Y+7	; 0x07
 16e:	98 85       	ldd	r25, Y+8	; 0x08
 170:	0e 94 66 01 	call	0x2cc	; 0x2cc <__cmpsf2>
 174:	88 23       	and	r24, r24
 176:	2c f4       	brge	.+10     	; 0x182 <main+0xdc>
		__ticks = 1;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	9a 87       	std	Y+10, r25	; 0x0a
 17e:	89 87       	std	Y+9, r24	; 0x09
 180:	3f c0       	rjmp	.+126    	; 0x200 <main+0x15a>
	else if (__tmp > 65535)
 182:	20 e0       	ldi	r18, 0x00	; 0
 184:	3f ef       	ldi	r19, 0xFF	; 255
 186:	4f e7       	ldi	r20, 0x7F	; 127
 188:	57 e4       	ldi	r21, 0x47	; 71
 18a:	6d 81       	ldd	r22, Y+5	; 0x05
 18c:	7e 81       	ldd	r23, Y+6	; 0x06
 18e:	8f 81       	ldd	r24, Y+7	; 0x07
 190:	98 85       	ldd	r25, Y+8	; 0x08
 192:	0e 94 e7 01 	call	0x3ce	; 0x3ce <__gesf2>
 196:	18 16       	cp	r1, r24
 198:	4c f5       	brge	.+82     	; 0x1ec <main+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 19a:	20 e0       	ldi	r18, 0x00	; 0
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	40 e2       	ldi	r20, 0x20	; 32
 1a0:	51 e4       	ldi	r21, 0x41	; 65
 1a2:	69 81       	ldd	r22, Y+1	; 0x01
 1a4:	7a 81       	ldd	r23, Y+2	; 0x02
 1a6:	8b 81       	ldd	r24, Y+3	; 0x03
 1a8:	9c 81       	ldd	r25, Y+4	; 0x04
 1aa:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__mulsf3>
 1ae:	dc 01       	movw	r26, r24
 1b0:	cb 01       	movw	r24, r22
 1b2:	bc 01       	movw	r22, r24
 1b4:	cd 01       	movw	r24, r26
 1b6:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <__fixunssfsi>
 1ba:	dc 01       	movw	r26, r24
 1bc:	cb 01       	movw	r24, r22
 1be:	9a 87       	std	Y+10, r25	; 0x0a
 1c0:	89 87       	std	Y+9, r24	; 0x09
 1c2:	0f c0       	rjmp	.+30     	; 0x1e2 <main+0x13c>
 1c4:	80 e9       	ldi	r24, 0x90	; 144
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	9c 87       	std	Y+12, r25	; 0x0c
 1ca:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1cc:	8b 85       	ldd	r24, Y+11	; 0x0b
 1ce:	9c 85       	ldd	r25, Y+12	; 0x0c
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <main+0x12a>
 1d4:	9c 87       	std	Y+12, r25	; 0x0c
 1d6:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d8:	89 85       	ldd	r24, Y+9	; 0x09
 1da:	9a 85       	ldd	r25, Y+10	; 0x0a
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	9a 87       	std	Y+10, r25	; 0x0a
 1e0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1e2:	89 85       	ldd	r24, Y+9	; 0x09
 1e4:	9a 85       	ldd	r25, Y+10	; 0x0a
 1e6:	89 2b       	or	r24, r25
 1e8:	69 f7       	brne	.-38     	; 0x1c4 <main+0x11e>
 1ea:	14 c0       	rjmp	.+40     	; 0x214 <main+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1ec:	6d 81       	ldd	r22, Y+5	; 0x05
 1ee:	7e 81       	ldd	r23, Y+6	; 0x06
 1f0:	8f 81       	ldd	r24, Y+7	; 0x07
 1f2:	98 85       	ldd	r25, Y+8	; 0x08
 1f4:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <__fixunssfsi>
 1f8:	dc 01       	movw	r26, r24
 1fa:	cb 01       	movw	r24, r22
 1fc:	9a 87       	std	Y+10, r25	; 0x0a
 1fe:	89 87       	std	Y+9, r24	; 0x09
 200:	89 85       	ldd	r24, Y+9	; 0x09
 202:	9a 85       	ldd	r25, Y+10	; 0x0a
 204:	9e 87       	std	Y+14, r25	; 0x0e
 206:	8d 87       	std	Y+13, r24	; 0x0d
 208:	8d 85       	ldd	r24, Y+13	; 0x0d
 20a:	9e 85       	ldd	r25, Y+14	; 0x0e
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <main+0x166>
 210:	9e 87       	std	Y+14, r25	; 0x0e
 212:	8d 87       	std	Y+13, r24	; 0x0d
			_delay_ms(1000);
			
			if(cont == 10) //reinicia a contagem
 214:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 218:	8a 30       	cpi	r24, 0x0A	; 10
 21a:	69 f4       	brne	.+26     	; 0x236 <main+0x190>
			{
				
				cont2++;
 21c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cont2>
 220:	8f 5f       	subi	r24, 0xFF	; 255
 222:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <cont2>
				if (cont2==10)
 226:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cont2>
 22a:	8a 30       	cpi	r24, 0x0A	; 10
 22c:	11 f4       	brne	.+4      	; 0x232 <main+0x18c>
				{
					cont2 =0;
 22e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <cont2>
				}
				cont=0;
 232:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
			}
			
			PORTC = seg[cont2];
 236:	88 e2       	ldi	r24, 0x28	; 40
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <cont2>
 23e:	22 2f       	mov	r18, r18
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	20 50       	subi	r18, 0x00	; 0
 244:	3f 4f       	sbci	r19, 0xFF	; 255
 246:	f9 01       	movw	r30, r18
 248:	20 81       	ld	r18, Z
 24a:	fc 01       	movw	r30, r24
 24c:	20 83       	st	Z, r18
			
		}
	}
 24e:	59 cf       	rjmp	.-334    	; 0x102 <main+0x5c>

00000250 <__vector_1>:
}
ISR(INT0_vect) //pausar e iniciar
{
 250:	1f 92       	push	r1
 252:	0f 92       	push	r0
 254:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 258:	0f 92       	push	r0
 25a:	11 24       	eor	r1, r1
 25c:	2f 93       	push	r18
 25e:	8f 93       	push	r24
 260:	9f 93       	push	r25
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	cd b7       	in	r28, 0x3d	; 61
 268:	de b7       	in	r29, 0x3e	; 62
	
	aux =!aux;
 26a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <aux>
 26e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <aux+0x1>
 272:	21 e0       	ldi	r18, 0x01	; 1
 274:	89 2b       	or	r24, r25
 276:	09 f0       	breq	.+2      	; 0x27a <__vector_1+0x2a>
 278:	20 e0       	ldi	r18, 0x00	; 0
 27a:	82 2f       	mov	r24, r18
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <aux+0x1>
 282:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <aux>
	
}
 286:	00 00       	nop
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	9f 91       	pop	r25
 28e:	8f 91       	pop	r24
 290:	2f 91       	pop	r18
 292:	0f 90       	pop	r0
 294:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 298:	0f 90       	pop	r0
 29a:	1f 90       	pop	r1
 29c:	18 95       	reti

0000029e <__vector_2>:
ISR(INT1_vect) // zerar a contagem
{
 29e:	1f 92       	push	r1
 2a0:	0f 92       	push	r0
 2a2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	cd b7       	in	r28, 0x3d	; 61
 2b0:	de b7       	in	r29, 0x3e	; 62
	
	cont = 0;
 2b2:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
	cont2 = 0;
 2b6:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <cont2>
	
 2ba:	00 00       	nop
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	0f 90       	pop	r0
 2c2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 2c6:	0f 90       	pop	r0
 2c8:	1f 90       	pop	r1
 2ca:	18 95       	reti

000002cc <__cmpsf2>:
 2cc:	0e 94 9a 01 	call	0x334	; 0x334 <__fp_cmp>
 2d0:	08 f4       	brcc	.+2      	; 0x2d4 <__cmpsf2+0x8>
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	08 95       	ret

000002d6 <__fixunssfsi>:
 2d6:	0e 94 c6 01 	call	0x38c	; 0x38c <__fp_splitA>
 2da:	88 f0       	brcs	.+34     	; 0x2fe <__fixunssfsi+0x28>
 2dc:	9f 57       	subi	r25, 0x7F	; 127
 2de:	98 f0       	brcs	.+38     	; 0x306 <__fixunssfsi+0x30>
 2e0:	b9 2f       	mov	r27, r25
 2e2:	99 27       	eor	r25, r25
 2e4:	b7 51       	subi	r27, 0x17	; 23
 2e6:	b0 f0       	brcs	.+44     	; 0x314 <__fixunssfsi+0x3e>
 2e8:	e1 f0       	breq	.+56     	; 0x322 <__fixunssfsi+0x4c>
 2ea:	66 0f       	add	r22, r22
 2ec:	77 1f       	adc	r23, r23
 2ee:	88 1f       	adc	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	1a f0       	brmi	.+6      	; 0x2fa <__fixunssfsi+0x24>
 2f4:	ba 95       	dec	r27
 2f6:	c9 f7       	brne	.-14     	; 0x2ea <__fixunssfsi+0x14>
 2f8:	14 c0       	rjmp	.+40     	; 0x322 <__fixunssfsi+0x4c>
 2fa:	b1 30       	cpi	r27, 0x01	; 1
 2fc:	91 f0       	breq	.+36     	; 0x322 <__fixunssfsi+0x4c>
 2fe:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <__fp_zero>
 302:	b1 e0       	ldi	r27, 0x01	; 1
 304:	08 95       	ret
 306:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__fp_zero>
 30a:	67 2f       	mov	r22, r23
 30c:	78 2f       	mov	r23, r24
 30e:	88 27       	eor	r24, r24
 310:	b8 5f       	subi	r27, 0xF8	; 248
 312:	39 f0       	breq	.+14     	; 0x322 <__fixunssfsi+0x4c>
 314:	b9 3f       	cpi	r27, 0xF9	; 249
 316:	cc f3       	brlt	.-14     	; 0x30a <__fixunssfsi+0x34>
 318:	86 95       	lsr	r24
 31a:	77 95       	ror	r23
 31c:	67 95       	ror	r22
 31e:	b3 95       	inc	r27
 320:	d9 f7       	brne	.-10     	; 0x318 <__fixunssfsi+0x42>
 322:	3e f4       	brtc	.+14     	; 0x332 <__fixunssfsi+0x5c>
 324:	90 95       	com	r25
 326:	80 95       	com	r24
 328:	70 95       	com	r23
 32a:	61 95       	neg	r22
 32c:	7f 4f       	sbci	r23, 0xFF	; 255
 32e:	8f 4f       	sbci	r24, 0xFF	; 255
 330:	9f 4f       	sbci	r25, 0xFF	; 255
 332:	08 95       	ret

00000334 <__fp_cmp>:
 334:	99 0f       	add	r25, r25
 336:	00 08       	sbc	r0, r0
 338:	55 0f       	add	r21, r21
 33a:	aa 0b       	sbc	r26, r26
 33c:	e0 e8       	ldi	r30, 0x80	; 128
 33e:	fe ef       	ldi	r31, 0xFE	; 254
 340:	16 16       	cp	r1, r22
 342:	17 06       	cpc	r1, r23
 344:	e8 07       	cpc	r30, r24
 346:	f9 07       	cpc	r31, r25
 348:	c0 f0       	brcs	.+48     	; 0x37a <__fp_cmp+0x46>
 34a:	12 16       	cp	r1, r18
 34c:	13 06       	cpc	r1, r19
 34e:	e4 07       	cpc	r30, r20
 350:	f5 07       	cpc	r31, r21
 352:	98 f0       	brcs	.+38     	; 0x37a <__fp_cmp+0x46>
 354:	62 1b       	sub	r22, r18
 356:	73 0b       	sbc	r23, r19
 358:	84 0b       	sbc	r24, r20
 35a:	95 0b       	sbc	r25, r21
 35c:	39 f4       	brne	.+14     	; 0x36c <__fp_cmp+0x38>
 35e:	0a 26       	eor	r0, r26
 360:	61 f0       	breq	.+24     	; 0x37a <__fp_cmp+0x46>
 362:	23 2b       	or	r18, r19
 364:	24 2b       	or	r18, r20
 366:	25 2b       	or	r18, r21
 368:	21 f4       	brne	.+8      	; 0x372 <__fp_cmp+0x3e>
 36a:	08 95       	ret
 36c:	0a 26       	eor	r0, r26
 36e:	09 f4       	brne	.+2      	; 0x372 <__fp_cmp+0x3e>
 370:	a1 40       	sbci	r26, 0x01	; 1
 372:	a6 95       	lsr	r26
 374:	8f ef       	ldi	r24, 0xFF	; 255
 376:	81 1d       	adc	r24, r1
 378:	81 1d       	adc	r24, r1
 37a:	08 95       	ret

0000037c <__fp_split3>:
 37c:	57 fd       	sbrc	r21, 7
 37e:	90 58       	subi	r25, 0x80	; 128
 380:	44 0f       	add	r20, r20
 382:	55 1f       	adc	r21, r21
 384:	59 f0       	breq	.+22     	; 0x39c <__fp_splitA+0x10>
 386:	5f 3f       	cpi	r21, 0xFF	; 255
 388:	71 f0       	breq	.+28     	; 0x3a6 <__fp_splitA+0x1a>
 38a:	47 95       	ror	r20

0000038c <__fp_splitA>:
 38c:	88 0f       	add	r24, r24
 38e:	97 fb       	bst	r25, 7
 390:	99 1f       	adc	r25, r25
 392:	61 f0       	breq	.+24     	; 0x3ac <__fp_splitA+0x20>
 394:	9f 3f       	cpi	r25, 0xFF	; 255
 396:	79 f0       	breq	.+30     	; 0x3b6 <__fp_splitA+0x2a>
 398:	87 95       	ror	r24
 39a:	08 95       	ret
 39c:	12 16       	cp	r1, r18
 39e:	13 06       	cpc	r1, r19
 3a0:	14 06       	cpc	r1, r20
 3a2:	55 1f       	adc	r21, r21
 3a4:	f2 cf       	rjmp	.-28     	; 0x38a <__fp_split3+0xe>
 3a6:	46 95       	lsr	r20
 3a8:	f1 df       	rcall	.-30     	; 0x38c <__fp_splitA>
 3aa:	08 c0       	rjmp	.+16     	; 0x3bc <__fp_splitA+0x30>
 3ac:	16 16       	cp	r1, r22
 3ae:	17 06       	cpc	r1, r23
 3b0:	18 06       	cpc	r1, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	f1 cf       	rjmp	.-30     	; 0x398 <__fp_splitA+0xc>
 3b6:	86 95       	lsr	r24
 3b8:	71 05       	cpc	r23, r1
 3ba:	61 05       	cpc	r22, r1
 3bc:	08 94       	sec
 3be:	08 95       	ret

000003c0 <__fp_zero>:
 3c0:	e8 94       	clt

000003c2 <__fp_szero>:
 3c2:	bb 27       	eor	r27, r27
 3c4:	66 27       	eor	r22, r22
 3c6:	77 27       	eor	r23, r23
 3c8:	cb 01       	movw	r24, r22
 3ca:	97 f9       	bld	r25, 7
 3cc:	08 95       	ret

000003ce <__gesf2>:
 3ce:	0e 94 9a 01 	call	0x334	; 0x334 <__fp_cmp>
 3d2:	08 f4       	brcc	.+2      	; 0x3d6 <__gesf2+0x8>
 3d4:	8f ef       	ldi	r24, 0xFF	; 255
 3d6:	08 95       	ret

000003d8 <__mulsf3>:
 3d8:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__mulsf3x>
 3dc:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__fp_round>
 3e0:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__fp_pscA>
 3e4:	38 f0       	brcs	.+14     	; 0x3f4 <__mulsf3+0x1c>
 3e6:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__fp_pscB>
 3ea:	20 f0       	brcs	.+8      	; 0x3f4 <__mulsf3+0x1c>
 3ec:	95 23       	and	r25, r21
 3ee:	11 f0       	breq	.+4      	; 0x3f4 <__mulsf3+0x1c>
 3f0:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__fp_inf>
 3f4:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__fp_nan>
 3f8:	11 24       	eor	r1, r1
 3fa:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__fp_szero>

000003fe <__mulsf3x>:
 3fe:	0e 94 be 01 	call	0x37c	; 0x37c <__fp_split3>
 402:	70 f3       	brcs	.-36     	; 0x3e0 <__mulsf3+0x8>

00000404 <__mulsf3_pse>:
 404:	95 9f       	mul	r25, r21
 406:	c1 f3       	breq	.-16     	; 0x3f8 <__mulsf3+0x20>
 408:	95 0f       	add	r25, r21
 40a:	50 e0       	ldi	r21, 0x00	; 0
 40c:	55 1f       	adc	r21, r21
 40e:	62 9f       	mul	r22, r18
 410:	f0 01       	movw	r30, r0
 412:	72 9f       	mul	r23, r18
 414:	bb 27       	eor	r27, r27
 416:	f0 0d       	add	r31, r0
 418:	b1 1d       	adc	r27, r1
 41a:	63 9f       	mul	r22, r19
 41c:	aa 27       	eor	r26, r26
 41e:	f0 0d       	add	r31, r0
 420:	b1 1d       	adc	r27, r1
 422:	aa 1f       	adc	r26, r26
 424:	64 9f       	mul	r22, r20
 426:	66 27       	eor	r22, r22
 428:	b0 0d       	add	r27, r0
 42a:	a1 1d       	adc	r26, r1
 42c:	66 1f       	adc	r22, r22
 42e:	82 9f       	mul	r24, r18
 430:	22 27       	eor	r18, r18
 432:	b0 0d       	add	r27, r0
 434:	a1 1d       	adc	r26, r1
 436:	62 1f       	adc	r22, r18
 438:	73 9f       	mul	r23, r19
 43a:	b0 0d       	add	r27, r0
 43c:	a1 1d       	adc	r26, r1
 43e:	62 1f       	adc	r22, r18
 440:	83 9f       	mul	r24, r19
 442:	a0 0d       	add	r26, r0
 444:	61 1d       	adc	r22, r1
 446:	22 1f       	adc	r18, r18
 448:	74 9f       	mul	r23, r20
 44a:	33 27       	eor	r19, r19
 44c:	a0 0d       	add	r26, r0
 44e:	61 1d       	adc	r22, r1
 450:	23 1f       	adc	r18, r19
 452:	84 9f       	mul	r24, r20
 454:	60 0d       	add	r22, r0
 456:	21 1d       	adc	r18, r1
 458:	82 2f       	mov	r24, r18
 45a:	76 2f       	mov	r23, r22
 45c:	6a 2f       	mov	r22, r26
 45e:	11 24       	eor	r1, r1
 460:	9f 57       	subi	r25, 0x7F	; 127
 462:	50 40       	sbci	r21, 0x00	; 0
 464:	9a f0       	brmi	.+38     	; 0x48c <__mulsf3_pse+0x88>
 466:	f1 f0       	breq	.+60     	; 0x4a4 <__mulsf3_pse+0xa0>
 468:	88 23       	and	r24, r24
 46a:	4a f0       	brmi	.+18     	; 0x47e <__mulsf3_pse+0x7a>
 46c:	ee 0f       	add	r30, r30
 46e:	ff 1f       	adc	r31, r31
 470:	bb 1f       	adc	r27, r27
 472:	66 1f       	adc	r22, r22
 474:	77 1f       	adc	r23, r23
 476:	88 1f       	adc	r24, r24
 478:	91 50       	subi	r25, 0x01	; 1
 47a:	50 40       	sbci	r21, 0x00	; 0
 47c:	a9 f7       	brne	.-22     	; 0x468 <__mulsf3_pse+0x64>
 47e:	9e 3f       	cpi	r25, 0xFE	; 254
 480:	51 05       	cpc	r21, r1
 482:	80 f0       	brcs	.+32     	; 0x4a4 <__mulsf3_pse+0xa0>
 484:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__fp_inf>
 488:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__fp_szero>
 48c:	5f 3f       	cpi	r21, 0xFF	; 255
 48e:	e4 f3       	brlt	.-8      	; 0x488 <__mulsf3_pse+0x84>
 490:	98 3e       	cpi	r25, 0xE8	; 232
 492:	d4 f3       	brlt	.-12     	; 0x488 <__mulsf3_pse+0x84>
 494:	86 95       	lsr	r24
 496:	77 95       	ror	r23
 498:	67 95       	ror	r22
 49a:	b7 95       	ror	r27
 49c:	f7 95       	ror	r31
 49e:	e7 95       	ror	r30
 4a0:	9f 5f       	subi	r25, 0xFF	; 255
 4a2:	c1 f7       	brne	.-16     	; 0x494 <__mulsf3_pse+0x90>
 4a4:	fe 2b       	or	r31, r30
 4a6:	88 0f       	add	r24, r24
 4a8:	91 1d       	adc	r25, r1
 4aa:	96 95       	lsr	r25
 4ac:	87 95       	ror	r24
 4ae:	97 f9       	bld	r25, 7
 4b0:	08 95       	ret

000004b2 <__fp_inf>:
 4b2:	97 f9       	bld	r25, 7
 4b4:	9f 67       	ori	r25, 0x7F	; 127
 4b6:	80 e8       	ldi	r24, 0x80	; 128
 4b8:	70 e0       	ldi	r23, 0x00	; 0
 4ba:	60 e0       	ldi	r22, 0x00	; 0
 4bc:	08 95       	ret

000004be <__fp_nan>:
 4be:	9f ef       	ldi	r25, 0xFF	; 255
 4c0:	80 ec       	ldi	r24, 0xC0	; 192
 4c2:	08 95       	ret

000004c4 <__fp_pscA>:
 4c4:	00 24       	eor	r0, r0
 4c6:	0a 94       	dec	r0
 4c8:	16 16       	cp	r1, r22
 4ca:	17 06       	cpc	r1, r23
 4cc:	18 06       	cpc	r1, r24
 4ce:	09 06       	cpc	r0, r25
 4d0:	08 95       	ret

000004d2 <__fp_pscB>:
 4d2:	00 24       	eor	r0, r0
 4d4:	0a 94       	dec	r0
 4d6:	12 16       	cp	r1, r18
 4d8:	13 06       	cpc	r1, r19
 4da:	14 06       	cpc	r1, r20
 4dc:	05 06       	cpc	r0, r21
 4de:	08 95       	ret

000004e0 <__fp_round>:
 4e0:	09 2e       	mov	r0, r25
 4e2:	03 94       	inc	r0
 4e4:	00 0c       	add	r0, r0
 4e6:	11 f4       	brne	.+4      	; 0x4ec <__fp_round+0xc>
 4e8:	88 23       	and	r24, r24
 4ea:	52 f0       	brmi	.+20     	; 0x500 <__fp_round+0x20>
 4ec:	bb 0f       	add	r27, r27
 4ee:	40 f4       	brcc	.+16     	; 0x500 <__fp_round+0x20>
 4f0:	bf 2b       	or	r27, r31
 4f2:	11 f4       	brne	.+4      	; 0x4f8 <__fp_round+0x18>
 4f4:	60 ff       	sbrs	r22, 0
 4f6:	04 c0       	rjmp	.+8      	; 0x500 <__fp_round+0x20>
 4f8:	6f 5f       	subi	r22, 0xFF	; 255
 4fa:	7f 4f       	sbci	r23, 0xFF	; 255
 4fc:	8f 4f       	sbci	r24, 0xFF	; 255
 4fe:	9f 4f       	sbci	r25, 0xFF	; 255
 500:	08 95       	ret

00000502 <_exit>:
 502:	f8 94       	cli

00000504 <__stop_program>:
 504:	ff cf       	rjmp	.-2      	; 0x504 <__stop_program>
